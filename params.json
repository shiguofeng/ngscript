{"name":"ngscript","tagline":"ngscript language site","body":"#ngscript: An overview\r\n\r\n##Introduction\r\nngscript is an embeded script language for Java. It has almost the same features as Javascript, and in addtion, ngscript provides an elegant way to interact with native Java classes and objects. \r\nExamples in this text are ready to run on http://shell.ngscript.org/ (or http://ngscript.sinaapp.com for faster access), except some related to IO operation.\r\nThe \"VM\" mentioned below, if no special emphasis, is ngscript's WscVM.\r\n\r\n##Language elements\r\n\r\n###Variable\r\nTo define a variable, use `var` statement. \r\n**Please notice that if you don't initialize the variable once it is declared, ngscript doesn't guarantee the content in it.**\r\n\r\n>**Here is some examples**\r\n>\r\n>Define a variable named as var_name\r\n>\r\n>       var var_name;\r\n>\r\n>Inline definition\r\n>\r\n>       for (var i = 0; i < 9; ++i) ...\r\n\r\nVariables in ngscript seems typeless, but in fact they are all stored as Object in the VM. \r\nPrimitive types are auto-boxed, but if you call a native method that requires primitive types, the VM unbox primitives automatically.\r\n\r\n###Function\r\n####Named function\r\nNamed function is declared like\r\n\r\n        function func1 (param1, param2) {\r\n            println(param1 + \",\" + param2);\r\n        }\r\n        \r\nYou might as well notice that **named functions are registered in global scope**.\r\n\r\n####Lambda\r\nngscript supports anonymous function, in fact, the underlying implements of named function is a variable that stores a anonymous function along with global environment.\r\n\r\n>Instant call of lambda\r\n>\r\n>       (function (){\r\n>           println(\"hello\");\r\n>       })();\r\n>\r\n>Use a variable to store lambda\r\n>\r\n>       var f = function(){\r\n>           println(\"hello, stored lambda\");\r\n>       };\r\n>\r\n\r\n*If you're looking for more creative usage of lambda, read the SICP wizard book*\r\n\r\n####Native closure\r\nIt's known to all that object is a combination of `DATA` and `PROCESS`. The centeral concept of OOP is the `DATA` stored in members and the `PROCESS` defined as methods. \r\n\r\nThe other way around, if `DATA` stores in environment(or enclosure variable), `PROCESS` is just a single function, obviously, the combination of `DATA` and `PROCESS` is our function closure.\r\n\r\nSo ngscript provides a different way to reference native objects, that is what I called \"Native closure\".\r\n\r\n>When we're making reference to native Java's object method, the VM creates a native closure to store it.\r\n>\r\n>       //native Java ArrayList\r\n>       var array = new ArrayList();\r\n>       //add something\r\n>       array.add(1); array.add(2); array.add(3);\r\n>       //reference to method of a native object\r\n>       var ref_get = array.get;\r\n>       //call the reference to get the element of index 1\r\n>       println(ref_get(1));\r\n\r\n*ngscript's native closure also supports function overriding*\r\n\r\n###Object\r\nngscript's object system is based on environment and closure, and without annoying things like prototype and dynamic scoping.\r\n\r\n####ngscript object\r\n>Define a constructor is like define a named function\r\n>\r\n>       function One(name) {\r\n>           this.hiho = function(){\r\n>               println(\"I'm \" + name);\r\n>           };\r\n>       }\r\n>\r\n>Create an object with `new` operator\r\n>\r\n>       var newone = new One(\"wssccc\");\r\n>       newone.hiho();\r\n>\r\n>Or you can use the empty constructor \r\n>\r\n>       var otherone = new Object();\r\n>       otherone.hiho = newone.hiho;\r\n>       otherone.hiho();\r\n\r\n####Native Java support\r\nNative Java Classes are also available.\r\n>Create a instance of ArrayList\r\n>\r\n>       var arraylist = new ArrayList();\r\n>       arraylist.add(1);\r\n>       arraylist.add(2);\r\n>       println(arraylist.toString());\r\n>       arraylist.remove(0);\r\n>       println(arraylist.toString());\r\n>\r\n\r\n####Import Java class\r\njava.lang.\\* and java.util.\\* are imported by default.\r\nngscript supports `import` statement, but it's not fully tested yet.\r\n\r\n###typeof\r\n`typeof` is an operator to retrieve the type information of data. The return value is a string.\r\n>\r\n>       println(typeof println);\r\n>       var a = 1;\r\n>       println(typeof a);\r\n>       println(typeof println);\r\n\r\n###println\r\nprintln is to print a line.\r\n\r\n###eval\r\neval takes one string parameter, the string can be a valid expression or statements. \r\neval executes the code, and return the %eax once the VM returned.\r\n>\r\n>       println(eval(\"15+20\"));\r\n>\r\n\r\n###Error handling\r\nngscript supports traditional try...catch statements to handle exceptions. These exceptions can be both ngscript's exception object(inner class name VMException) and Java native excetpion(inherited from Exception class).\r\n\r\n>The try...catch statement is like this\r\n>\r\n>       try {\r\n>               println(\"will throw excepton\");\r\n>               throw \"exception\";\r\n>       } catch (e) {\r\n>               println(e.toString());\r\n>       }\r\n\r\n`throw` statement throws an object as exception body, the object can be anything(integer, string, or something else).\r\nCatchable Java exceptions can be caught as well, but exceptions such as RuntimeException will not caught by the statement.\r\n\r\nThe current implementation of the VM catches all unhandled exceptions by default. But it may be useful to throw some of the exceptions to the outer host environment. You can modify the VM by yourself to accomplish this.\r\n\r\n###Coroutine\r\nCoroutine is an useful feature in certain situation. ngscript supports coroutine by providing a class Coroutine.\r\n>\r\n>       //declare a function first\r\n>       function f(a,b) {\r\n>               println(\"first = \" + a);\r\n>               //call yield to switch to previous\r\n>               //and you can passing a retval\r\n>               yield(1); \r\n>               //when resume at second time\r\n>               //this coroutine will begins at here\r\n>               println(\"second = \" + b);\r\n>       }\r\n>\r\n>       //create coroutine\r\n>       var co = new Coroutine(f); \r\n>       //use push to add args\r\n>       co.push(\"p1\");\r\n>       co.push(\"p2\");\r\n>\r\n>       println(\"coroutine status=\" + co.status());\r\n>       //call resume to switch to coroutine\r\n>       //and will returned with a retval\r\n>       println(\"resume 1 = \" + co.resume());\r\n>       println(\"coroutine status=\" + co.status());\r\n>       //the second resume has nothing returned but garbages\r\n>       println(\"resume 2 = \" + co.resume());\r\n>       println(\"coroutine status=\" + co.status());\r\n>       //when trying to resume a coroutine which is already returned\r\n>       //will throw an exception\r\n>       try {\r\n>               println(\"resume 3:\");\r\n>               println(co.resume());\r\n>       } catch(e) {\r\n>               println(\"you cannot resume a returned coroutine!\");\r\n>       }\r\n>\r\n\r\n##other\r\n###ngscript online\r\n[http://shell.ngscript.org/](http://shell.ngscript.org/) is an online version of ngscript.\r\nIt is a **REPL** shell, just write your code line, and tap enter to submit.\r\nIf you write a valid statement(include expression, while, for, if, etc.), the VM knows it's time to compile and run, then you can see the outputs. Once the compiled code is run to the end, the VM prints the %eax register value.\r\n**If you wrote an incomplete structure and submitted, the prompt will display as `...`, to tell you continue writing. Only complete syntax structure will trigger a compile-run action.**\r\nIt's useful to submit a `;` (semicolon) to flush the stream, and clear error status.\r\n\r\nTap tab to active completion, the completion feature covers useful commands, and members in current scope.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}